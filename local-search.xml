<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记一次网络故障</title>
    <link href="/2023/07/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C/"/>
    <url>/2023/07/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">不知道为什么回家后，连上wifi没网了？？？，真倒霉，家里所有人都有网络，我的手机也有，就我的电脑没有网。</code></pre><br><p> 没事，想想自己学过计网应该很快能解决。</p><br><h3 id="开搞-第一反应是IP冲突了，毕竟我一堆虚拟网卡，"><a href="#开搞-第一反应是IP冲突了，毕竟我一堆虚拟网卡，" class="headerlink" title="开搞,第一反应是IP冲突了，毕竟我一堆虚拟网卡，"></a>开搞,第一反应是IP冲突了，毕竟我一堆虚拟网卡，</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">ipconfig</span> /all<br></code></pre></td></tr></table></figure><p>检查一下，发现没有冲突啊？</p><h3 id="第二反应，检查是不是dns出问题了"><a href="#第二反应，检查是不是dns出问题了" class="headerlink" title="第二反应，检查是不是dns出问题了"></a>第二反应，检查是不是dns出问题了</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">ipconfig</span> /flushdns  #我先刷新一下dns缓存<br>nslookup baidu.com<br></code></pre></td></tr></table></figure><p>正常啊，解析出来了</p><p>继续测试</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">ping</span> <span class="hljs-number">114</span>.<span class="hljs-number">114</span>.<span class="hljs-number">114</span>.<span class="hljs-number">114</span><br></code></pre></td></tr></table></figure><p>得了，ping不同,</p><p>此时我的心想，快找到问题所在了</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">route <span class="hljs-built_in">print</span><br></code></pre></td></tr></table></figure><p>回显</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">活动路由:<br>网络目标        网络掩码          网关       接口   跃点数<br>          0.0.0.0          0.0.0.0      192.168.1.1      192.168.1.8     45<br>      192.168.1.0    255.255.255.0            在链路上       192.168.1.8    301<br>      192.168.1.8  255.255.255.255            在链路上       192.168.1.8    301<br>    192.168.1.255  255.255.255.255            在链路上       192.168.1.8    301<br>        224.0.0.0        240.0.0.0            在链路上       192.168.1.8    301<br>  255.255.255.255  255.255.255.255            在链路上       192.168.1.8    301<br></code></pre></td></tr></table></figure><p>也很正常的🦆，为什么啊？？？？</p><p>后面就一直路由追踪，，，，测不出什么东西，每次经过网关就没了。。。。</p><p>然后我就在想：是不是运营商给的那个光猫设置了什么限制</p><p>登录看了一遍感觉没啥？</p><p>完蛋，见鬼了，遇见<del>玄学</del>了?<br>遇到了我不认识的问题？<br>运营商给的光猫干嘛吃我数据包？</p><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>我在二级路由器绑了个固定IP<br>结束，不管网络性能损失了，我感觉就是运营商给了史前光猫的问题<br>之前试过一万年都不更新路由表，一万年都不更新dhcp客户端列表，每次有新设备接入都要断电就神奇，，，，<br>能用就行.jpg</p>]]></content>
    
    
    <categories>
      
      <category>chat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learn</tag>
      
      <tag>talk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clash杂谈</title>
    <link href="/2023/06/29/clash%E6%9D%82%E8%B0%88/"/>
    <url>/2023/06/29/clash%E6%9D%82%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<p>使用了cfw多时，前段时间(上一年😀)突然爆出漏洞，趁现在有空马上迁移到我的Linux虚拟机中去，那么问题来了，用什么开源项目好捏？<br>抱着这个疑问，疯狂的google了一个下午，顺便搞明白了大概的运作方式(其实不难)<br>先说明：我的cfw是旧版0.18？？,现在最新版是0.20.27，内核？（忘记了因为更新前忘记看了😃）</p><h1 id="clash的前后端分离以及rec漏洞"><a href="#clash的前后端分离以及rec漏洞" class="headerlink" title="clash的前后端分离以及rec漏洞"></a>clash的前后端分离以及rec漏洞</h1><h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><pre><code class="hljs">其实之前使用的时候就觉得奇怪了</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">PS C:\233333\bugaosuni&gt; tasklist |findstr /i clash<br>Clash <span class="hljs-keyword">for</span> Windows.exe         3180 Console                   20     89,768 K<br>Clash <span class="hljs-keyword">for</span> Windows.exe        15148 Console                   20     60,700 K<br>Clash <span class="hljs-keyword">for</span> Windows.exe        24696 Console                   20     44,300 K<br>Clash <span class="hljs-keyword">for</span> Windows.exe        18964 Console                   20    112,176 K<br>clash-win64.exe               6212 Console                   20     27,648 K<br></code></pre></td></tr></table></figure><p>为什么多了一个不同的进程？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">├───locales<br>└───resources<br>    └───static<br>        ├───files<br>        │   ├───default<br>        │   └───win<br>        │       ├───common<br>        │       │   └───tun2socks<br>        │       │       ├───amd64<br>        │       │       └───i386<br>        │       └───x64   <span class="hljs-comment"># 这个</span><br>        │           └───service<br>        └───imgs<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">└───x64  # 开源的内核放在这里的<br>    │   clash-win64.<span class="hljs-keyword">exe</span>  #这里<br>    │   clash-win64.<span class="hljs-keyword">exe</span>.<span class="hljs-keyword">sign</span><br>    │   <span class="hljs-keyword">go</span>-tun2socks.<span class="hljs-keyword">exe</span><br>    │   wintun.dll<br>    │<br>    └───service<br>            clash-core-service.<span class="hljs-keyword">exe</span><br>            service.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p>其实我们每次启动的cfw是这几个<code>Clash for Windows.exe</code><br>然后他再去调用内核，内核生成配置文件<br>其实这里有个有趣的事情，题外话了(内核是 GPL-3.0 license.👀)<br>路径：<code>C:\Users\你的用户名\.config\clash</code></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">│   <span class="hljs-keyword">cache.db</span><br><span class="hljs-keyword"></span>│   <span class="hljs-built_in">config</span>.yaml     <span class="hljs-comment">#内核自动下载的</span><br>│   Country.mmdb    <span class="hljs-comment">#内核自动下载的</span><br>│   wintun.dll<br>│<br>├───logs<br>└───profiles<br>        <span class="hljs-number">1233333332333</span>.yml <span class="hljs-comment">#这里是你导入的配置文件</span><br>        list.yml          <span class="hljs-comment">#这里</span><br></code></pre></td></tr></table></figure><p>core的config.yaml内容如下：(cfw默认生成，它动手脚了，下面我会说为啥)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mixed-port:</span> <span class="hljs-number">7890</span> <span class="hljs-comment"># 混合</span><br><span class="hljs-attr">allow-lan:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#允许lan，也就是开放给同一局域网的人用</span><br><span class="hljs-attr">external-controller:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:65213</span> <span class="hljs-comment"># 漏洞重点，漏洞的原因就是这个功能</span><br><span class="hljs-attr">secret:</span> <span class="hljs-string">c3ba3c77-8e1e-4f1b-ab5d-3b1cb2a6408e</span> <span class="hljs-comment"># 算是一种补丁</span><br><br></code></pre></td></tr></table></figure><p>第一次单独运行内核的输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[90m16:58:41[0m [32mINF[0m [Config] can<span class="hljs-string">&#x27;t find config, create a initial config file [36mpath=[90mC:\Users\WDAGUtilityAccount\.config\clash\config.yaml[0m</span><br><span class="hljs-string">[90m16:58:41[0m [32mINF[0m [MMDB] can&#x27;</span>t find DB, start download [36mpath=[90mC:\Users\WDAGUtilityAccount/.config/clash/Country.mmdb[0m<br>[90m16:58:44[0m [32mINF[0m [Inbound] Mixed(http+socks) listening [36maddr=[90m127.0.0.1:7890[0m<br></code></pre></td></tr></table></figure><p>他有提示说下载yaml和mmdb文件，默认混合port7890，翻看文件还会发现生成了个cache.db<br>然后yaml内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mixed-port: 7890<br><span class="hljs-comment"># 没了，其他功能要自己手动编写</span><br></code></pre></td></tr></table></figure><p>其他功能要自己手动编写<br><a href="https://dreamacro.github.io/clash/">https://dreamacro.github.io/clash/</a><br>自己翻文档看😁</p><p>cfw更改了默认配置config.yaml(core的)使其更加安全，默认锁定127.0.0.1，无法改为0.0.0.0，需要进面板关闭设置,secret 每次启动会随机生成(随机的 随机生成吗？有时候重启又不会变就很sao)<br>关于这个<br><code>external-controller: 127.0.0.1:65213</code><br>和<br><code>secret: c3ba3c77-8e1e-4f1b-ab5d-3b1cb2a6408e</code><br>可以看这个👇<br><a href="https://clash.gitbook.io/doc/restful-api">https://clash.gitbook.io/doc/restful-api</a><br>也就是前后端分离，方便开发者套一个精美的壳，主要干活的还是内核。</p><h2 id="rce漏洞"><a href="#rce漏洞" class="headerlink" title="rce漏洞"></a>rce漏洞</h2><p>主要原理就是构造恶意的订阅链接，骗xdm下载然后执行任意的JavaScript</p><p>主要攻击方式<br>骗你点进网站，在网站里放入构造好的playload，流量经过clash内核就会自动下载、切换、执行、gg。<br>Linux、window和mac都会中招<br>参考：<br><a href="https://classic0796.com/index.php/archives/26/">https://classic0796.com/index.php/archives/26/</a><br><a href="https://www.freebuf.com/vuls/323348.html">https://www.freebuf.com/vuls/323348.html</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>网上链接不要乱点，在电脑中的软件不要太多(ps:不大可能)，容易被Living Off The Land。</li><li>安装自己喜欢的杀软</li><li>一定要修改默认设置，一定要修改默认设置，一定要修改默认设置，一定要修改默认设置(天天说但是每次都百试百灵，什么默认密码不改，默认端口，默认路径)</li><li>养成良好上网习惯(误🧐)</li></ol>]]></content>
    
    
    <categories>
      
      <category>hack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learn</tag>
      
      <tag>talk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexoblog</title>
    <link href="/2023/06/27/hexo%E5%AE%89%E8%A3%85/"/>
    <url>/2023/06/27/hexo%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>我想也是一个时候搭建一个个人博客玩玩了</p><p>首先打开官网<a href="https://hexo.io/zh-cn/docs/index.html">https://hexo.io/zh-cn/docs/index.html</a></p><p>了解到我们要安装npm和git和node.js</p><h1 id="安装最新版Ubuntu"><a href="#安装最新版Ubuntu" class="headerlink" title="安装最新版Ubuntu"></a>安装最新版Ubuntu</h1><p>本着能用虚拟机就用虚拟机的原则<br>这里略过</p><h1 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h1><p><a href="https://github.com/nodesource/distributions">https://github.com/nodesource/distributions</a><br>自动化脚本一键安装</p><h1 id="安装git和npm"><a href="#安装git和npm" class="headerlink" title="安装git和npm"></a>安装git和npm</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update &amp;&amp;apt install git<br>apt install npm<br></code></pre></td></tr></table></figure><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h5 id="新建文件夹blog"><a href="#新建文件夹blog" class="headerlink" title="新建文件夹blog"></a>新建文件夹blog</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> blog<br></code></pre></td></tr></table></figure><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> hexo    <span class="hljs-comment"># 进入文件目录</span><br>hexo init  <span class="hljs-comment"># 博客初始化</span><br></code></pre></td></tr></table></figure><h5 id="安装插件（推送github必备）"><a href="#安装插件（推送github必备）" class="headerlink" title="安装插件（推送github必备）"></a>安装插件（推送github必备）</h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>然后会出现<br><a href="http://localhost:4000/">http://localhost:4000/</a><br>访问即可，如无问题就是安装成功</p><h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p><a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/creating-a-github-pages-site">https://docs.github.com/zh/pages/getting-started-with-github-pages/creating-a-github-pages-site</a></p><h3 id="git的配置"><a href="#git的配置" class="headerlink" title="git的配置"></a>git的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的Github用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的Github邮箱&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的Github邮箱&quot;</span>   <span class="hljs-comment">#生成一个密钥，后面要放到GitHub上面的</span><br></code></pre></td></tr></table></figure><h3 id="有关密钥"><a href="#有关密钥" class="headerlink" title="有关密钥"></a>有关密钥</h3><p>请查阅官方文档<br><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account</a><br>密钥放上去后的测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com <br></code></pre></td></tr></table></figure><h3 id="修改hexo的配置文件"><a href="#修改hexo的配置文件" class="headerlink" title="修改hexo的配置文件"></a>修改hexo的配置文件</h3><p>请参考下面链接的<strong>一键部署</strong><br><a href="https://hexo.io/zh-cn/docs/github-pages#content-inner">https://hexo.io/zh-cn/docs/github-pages#content-inner</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repository: git@github.com:yourname/yourname.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><p>关于repository：请将yourname改为你自己的GitHub名<br>关于branch：看你自己的仓库设置了什么</p><p>最后回到blog文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g   <span class="hljs-comment">#生成</span><br>hexo d   <span class="hljs-comment">#推送</span><br><br>以后更新可以使用<br>hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>IT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
